from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3, logging, random
from datetime import datetime

API_TOKEN = "7878879986:AAEnUlGIKo6MYyzsqny20qnX9adlITGF--s"
ADMIN_IDS = [1236771535]
MIN_AMOUNT = 30000
MAX_AMOUNT = 30000000

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

conn = sqlite3.connect("db.sqlite3", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS cards (id INTEGER PRIMARY KEY, number TEXT, active INTEGER DEFAULT 1, usage_count INTEGER DEFAULT 0)")
cursor.execute("CREATE TABLE IF NOT EXISTS requests (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, service TEXT, amount INTEGER, exact_amount INTEGER, xbet_id TEXT, card TEXT, status TEXT, created_at TEXT, file_id TEXT)")
conn.commit()

user_states = {}

# Reply-–∫–Ω–æ–ø–∫–∏
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add("üì© –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
menu_kb.add("üìà –ö—É—Ä—Å", "üßæ –ò—Å—Ç–æ—Ä–∏—è")
menu_kb.add("üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_states.pop(message.from_user.id, None)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UZpay!
–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=menu_kb)

@dp.message_handler(lambda m: m.text == "üì© –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def topup_start(message: types.Message):
    user_states[message.from_user.id] = {"step": "enter_card", "service": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:")

@dp.message_handler(lambda m: m.text == "üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
async def withdraw_start(message: types.Message):
    user_states[message.from_user.id] = {"step": "enter_card", "service": "–í—ã–≤–æ–¥"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")

@dp.message_handler()
async def process_steps(message: types.Message):
    state = user_states.get(message.from_user.id)
    if not state:
        return

    if state["step"] == "enter_card":
        state["card"] = message.text.strip()
        state["step"] = "enter_xbet"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (ID 1xBet):")

    elif state["step"] == "enter_xbet":
        state["xbet_id"] = message.text.strip()
        state["step"] = "enter_amount"
        await message.answer(f"–ú–∏–Ω–∏–º—É–º: {MIN_AMOUNT} UZS
–ú–∞–∫—Å–∏–º—É–º: {MAX_AMOUNT} UZS

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

    elif state["step"] == "enter_amount":
        try:
            amount = int(message.text.strip())
            if not (MIN_AMOUNT <= amount <= MAX_AMOUNT):
                return await message.answer("–°—É–º–º–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
            exact = amount + random.randint(1, 9)
            card = get_active_card()
            tg_id = message.from_user.id
            state.update({"amount": amount, "exact": exact, "card_used": card})
            cursor.execute("INSERT INTO requests (user_id, service, amount, exact_amount, xbet_id, card, status, created_at) VALUES (?, ?, ?, ?, ?, ?, '–æ–∂–∏–¥–∞–µ—Ç', ?)",
                (tg_id, state["service"], amount, exact, state["xbet_id"], card, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            conn.commit()
            req_id = cursor.lastrowid

            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{req_id}"),
                InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{req_id}")
            )

            await message.answer(
                f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é <b>{exact} UZS</b>, –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–∞—à–µ–π —Å—É–º–º—ã!

"
                f"–ö–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: <code>{card}</code>
"
                f"–ù–ï –ü–ï–†–ï–í–û–î–ò–¢–¨: {amount} UZS ‚ùå
"
                f"–ù–£–ñ–ù–û –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: <b>{exact} UZS</b> ‚úÖ

"
                f"‚úÖ –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!
"
                f"‚õî –ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å –∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É –ø–µ—Ä–µ–≤–µ–ª–∏ ‚Äî –º—ã –≤–µ—Ä–Ω—ë–º –¥–µ–Ω—å–≥–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Ä–∞–±. –¥–Ω–µ–π!

"
                f"TG_ID: {tg_id} #{req_id}",
                parse_mode="HTML", reply_markup=kb)
            user_states.pop(message.from_user.id)

        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_"))
async def confirm_payment(callback: types.CallbackQuery):
    rid = int(callback.data.split("_")[1])
    cursor.execute("UPDATE requests SET status = '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' WHERE id = ?", (rid,))
    conn.commit()
    await callback.message.answer("–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    await callback.answer()

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT])
async def receive_check(message: types.Message):
    cursor.execute("SELECT id FROM requests WHERE user_id = ? AND status = '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' ORDER BY id DESC LIMIT 1", (message.from_user.id,))
    row = cursor.fetchone()
    if not row:
        return
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    cursor.execute("UPDATE requests SET file_id = ? WHERE id = ?", (file_id, row[0]))
    conn.commit()
    await message.reply("–ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")

@dp.message_handler(commands=["addcard"])
async def add_card(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        num = message.text.split()[1]
        cursor.execute("INSERT INTO cards (number) VALUES (?)", (num,))
        conn.commit()
        await message.answer("–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except:
        await message.answer("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: /addcard 9860...")

@dp.message_handler(commands=["cards"])
async def list_cards(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    cursor.execute("SELECT id, number, usage_count FROM cards WHERE active = 1")
    rows = cursor.fetchall()
    if not rows:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç.")
    msg = "\n".join([f"{r[0]}: {r[1]} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ {r[2]} —Ä–∞–∑)" for r in rows])
    await message.answer(msg)

def get_active_card():
    cursor.execute("SELECT id, number FROM cards WHERE active = 1 ORDER BY usage_count ASC LIMIT 1")
    row = cursor.fetchone()
    if row:
        cursor.execute("UPDATE cards SET usage_count = usage_count + 1 WHERE id = ?", (row[0],))
        conn.commit()
        return row[1]
    return "9860 0000 0000 0000"

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)