from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
import sqlite3, os
from datetime import datetime
import pandas as pd

BOT_TOKEN = "8077158709:AAFDbx2Ek7WhAA6WBiIOWrLuMpAserStCo0"
ADMIN_IDS = [1236771535]
LOG_GROUP_ID = -1000000000000  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å ID —Å–≤–æ–µ–π –ª–æ–≥-–≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
conn = sqlite3.connect("db.sqlite3", check_same_thread=False)
cursor = conn.cursor()

# ===== –ö–ù–û–ü–ö–ò =====
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–í—ã–≤–æ–¥")

@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (msg.from_user.id,))
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def start_topup(msg: types.Message):
    uid = msg.from_user.id
    cursor.execute("SELECT * FROM requests WHERE user_id = ? AND status IN ('–æ–∂–∏–¥–∞–µ—Ç', '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ')", (uid,))
    if cursor.fetchone():
        return await msg.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π.")
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å—É–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100000):")
    dp.register_message_handler(process_amount, state="amount")

async def process_amount(msg: types.Message):
    try:
        amount = int(msg.text)
        if amount < 10000 or amount > 1000000:
            return await msg.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 000 –¥–æ 1 000 000 —Å—É–º.")
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID 1xBet:")
        dp.register_message_handler(lambda m: process_id(m, amount), state="id")
    except:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.")

async def process_id(msg: types.Message, amount):
    xbet_id = msg.text.strip()
    card_to_pay = get_active_card()
    req_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("""
        INSERT INTO requests (user_id, service, amount, xbet_id, status, created_at, sender_card)
        VALUES (?, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', ?, ?, '–æ–∂–∏–¥–∞–µ—Ç', ?, '')
    """, (msg.from_user.id, amount, xbet_id, req_time))
    conn.commit()
    req_id = cursor.lastrowid
    await msg.answer(
        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{req_id} —Å–æ–∑–¥–∞–Ω–∞.\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} —Å—É–º –Ω–∞ –∫–∞—Ä—Ç—É:\n<code>{card_to_pay}</code>\n"
        f"–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /paid_{req_id}",
        parse_mode="HTML"
    )

def get_active_card():
    cursor.execute("SELECT id, number FROM cards WHERE active = 1 ORDER BY usage_count ASC LIMIT 1")
    card = cursor.fetchone()
    if card:
        cursor.execute("UPDATE cards SET usage_count = usage_count + 1 WHERE id = ?", (card[0],))
        conn.commit()
        return card[1]
    return "9860 0000 0000 0000"

@dp.message_handler(lambda m: m.text.startswith("/paid_"))
async def paid_handler(msg: types.Message):
    uid = msg.from_user.id
    req_id = msg.text.split("_")[1]
    cursor.execute("SELECT status FROM requests WHERE id = ? AND user_id = ?", (req_id, uid))
    row = cursor.fetchone()
    if not row:
        return await msg.reply("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    if row[0] != "–æ–∂–∏–¥–∞–µ—Ç":
        return await msg.reply("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
    cursor.execute("UPDATE requests SET status = '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', paid_at = CURRENT_TIMESTAMP WHERE id = ?", (req_id,))
    conn.commit()
    await msg.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF).")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def receive_photo(msg: types.Message):
    uid = msg.from_user.id
    cursor.execute("SELECT id FROM requests WHERE user_id = ? AND status = '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' ORDER BY id DESC LIMIT 1", (uid,))
    row = cursor.fetchone()
    if not row:
        return await msg.reply("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –∑–∞—è–≤–∫–∏.")
    file_id = msg.photo[-1].file_id
    cursor.execute("UPDATE requests SET file1 = ? WHERE id = ?", (file_id, row[0]))
    conn.commit()
    await msg.reply("–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def receive_doc(msg: types.Message):
    uid = msg.from_user.id
    cursor.execute("SELECT id FROM requests WHERE user_id = ? AND status = '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' ORDER BY id DESC LIMIT 1", (uid,))
    row = cursor.fetchone()
    if not row:
        return await msg.reply("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –∑–∞—è–≤–∫–∏.")
    file_id = msg.document.file_id
    cursor.execute("UPDATE requests SET file2 = ? WHERE id = ?", (file_id, row[0]))
    conn.commit()
    await msg.reply("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω.")

@dp.message_handler(commands=["status"])
async def my_status(msg: types.Message):
    uid = msg.from_user.id
    cursor.execute("SELECT id, status FROM requests WHERE user_id = ? ORDER BY id DESC LIMIT 1", (uid,))
    row = cursor.fetchone()
    if not row:
        return await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
    await msg.reply(f"–ó–∞—è–≤–∫–∞ #{row[0]}: {row[1]}")

@dp.message_handler(commands=["confirm", "reject"])
async def admin_decision(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    parts = msg.text.split()
    if len(parts) < 2:
        return await msg.reply("–§–æ—Ä–º–∞—Ç: /confirm ID –∏–ª–∏ /reject ID –ø—Ä–∏—á–∏–Ω–∞")
    cmd, rid = parts[0], parts[1]
    if not rid.isdigit():
        return await msg.reply("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    status = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if "confirm" in cmd else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    reason = " ".join(parts[2:]) if status == "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" else ""
    cursor.execute("UPDATE requests SET status = ? WHERE id = ?", (status, rid))
    conn.commit()
    cursor.execute("SELECT user_id FROM requests WHERE id = ?", (rid,))
    user_id = cursor.fetchone()[0]
    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{rid} {status}.\n" + (f"–ü—Ä–∏—á–∏–Ω–∞: {reason}" if reason else ""))
    await msg.reply(f"–ó–∞—è–≤–∫–∞ {rid} {status}.")

@dp.callback_query_handler(lambda c: c.data.startswith("check_"))
async def show_check(callback: types.CallbackQuery):
    rid = int(callback.data.split("_")[1])
    cursor.execute("SELECT file1, file2 FROM requests WHERE id = ?", (rid,))
    files = cursor.fetchone()
    if not files or (not files[0] and not files[1]):
        return await callback.answer("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.message.answer(f"–ß–µ–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ #{rid}:")
    if files[0]:
        await bot.send_photo(callback.from_user.id, files[0])
    if files[1]:
        await bot.send_document(callback.from_user.id, files[1])

@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve_request(callback: types.CallbackQuery):
    rid = int(callback.data.split("_")[1])
    cursor.execute("UPDATE requests SET status = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' WHERE id = ?", (rid,))
    conn.commit()
    cursor.execute("SELECT user_id FROM requests WHERE id = ?", (rid,))
    user_id = cursor.fetchone()[0]
    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{rid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    await callback.message.edit_reply_markup()

@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def reject_request(callback: types.CallbackQuery):
    rid = int(callback.data.split("_")[1])
    cursor.execute("UPDATE requests SET status = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' WHERE id = ?", (rid,))
    conn.commit()
    cursor.execute("SELECT user_id FROM requests WHERE id = ?", (rid,))
    user_id = cursor.fetchone()[0]
    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{rid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await callback.message.edit_reply_markup()

@dp.callback_query_handler(lambda c: c.data == "admin_requests")
async def list_requests(callback: types.CallbackQuery):
    cursor.execute("SELECT id, user_id, amount, xbet_id, status FROM requests ORDER BY id DESC LIMIT 5")
    rows = cursor.fetchall()
    for r in rows:
        rid, uid, amount, xbet, status = r
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{rid}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{rid}")
        )
        kb.add(InlineKeyboardButton("üìé –ß–µ–∫", callback_data=f"check_{rid}"))
        text = f"#{rid} | {amount} —Å—É–º | ID: {xbet}\n–°—Ç–∞—Ç—É—Å: {status}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uid}"
        await callback.message.answer(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "admin_cards")
async def admin_cards(callback: types.CallbackQuery):
    cursor.execute("SELECT id, number, active FROM cards ORDER BY id")
    cards = cursor.fetchall()
    for c in cards:
        cid, number, active = c
        status = "‚úÖ" if active else "‚ùå"
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("–í–∫–ª/–í—ã–∫–ª", callback_data=f"togglecard_{cid}"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delcard_{cid}")
        )
        await callback.message.answer(f"{status} {number} (ID: {cid})", reply_markup=kb)
    await callback.message.answer("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É", reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="add_card_start")
    ))

@dp.callback_query_handler(lambda c: c.data.startswith("togglecard_"))
async def toggle_card_callback(callback: types.CallbackQuery):
    cid = int(callback.data.split("_")[1])
    cursor.execute("UPDATE cards SET active = 1 - active WHERE id = ?", (cid,))
    conn.commit()
    await callback.answer("–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω.")
    await callback.message.edit_reply_markup()

@dp.callback_query_handler(lambda c: c.data.startswith("delcard_"))
async def delete_card_callback(callback: types.CallbackQuery):
    cid = int(callback.data.split("_")[1])
    cursor.execute("DELETE FROM cards WHERE id = ?", (cid,))
    conn.commit()
    await callback.answer("–ö–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.message.edit_reply_markup()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é
adding_card = {}

@dp.callback_query_handler(lambda c: c.data == "add_card_start")
async def start_add_card(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9860XXXXXXXXXXXX):")
    adding_card[callback.from_user.id] = True

@dp.message_handler()
async def handle_new_card(message: types.Message):
    if adding_card.get(message.from_user.id):
        card = message.text.strip()
        if not card.startswith("9860") or len(card) < 16:
            return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã.")
        cursor.execute("INSERT INTO cards (number) VALUES (?)", (card,))
        conn.commit()
        adding_card.pop(message.from_user.id)
        return await message.reply("–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
