import os
import sqlite3
import random
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî‚Äî‚Äî
API_TOKEN = "7878879986:AAEnUlGIKo6MYyzsqny20qnX9adlITGF--s"
ADMIN_IDS = [1236771535]
MIN_AMOUNT = 30000
MAX_AMOUNT = 30000000

# ‚Äî‚Äî‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî‚Äî‚Äî
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect("db.sqlite3", check_same_thread=False)
cursor = conn.cursor()
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS cards (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    number TEXT NOT NULL,
    active INTEGER NOT NULL DEFAULT 1,
    usage_count INTEGER NOT NULL DEFAULT 0
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    service TEXT NOT NULL,
    amount INTEGER NOT NULL,
    exact_amount INTEGER,
    xbet_id TEXT,
    card TEXT,
    status TEXT NOT NULL,
    created_at TEXT NOT NULL,
    file_id TEXT
);
""")
conn.commit()

user_states = {}  # —Ö—Ä–∞–Ω–∏—Ç { user_id: {"service": "...", "step": "...", ...} }

# ‚Äî‚Äî‚Äî –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî‚Äî‚Äî
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üì© –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
main_kb.add("üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")


def get_active_card() -> str:
    """–ë–µ—Ä—ë—Ç —Å–∞–º—É—é –º–∞–ª–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É."""
    cursor.execute(
        "SELECT id, number FROM cards WHERE active=1 ORDER BY usage_count ASC LIMIT 1"
    )
    row = cursor.fetchone()
    if row:
        cid, number = row
        cursor.execute(
            "UPDATE cards SET usage_count = usage_count + 1 WHERE id = ?", (cid,)
        )
        conn.commit()
        return number
    return None


@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    user_states.pop(msg.from_user.id, None)
    await msg.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )


@dp.message_handler(lambda m: m.text == "üì© –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def start_topup(msg: types.Message):
    user_states[msg.from_user.id] = {"service": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "step": "card"}
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å):")


@dp.message_handler(lambda m: m.text == "üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
async def start_withdraw(msg: types.Message):
    user_states[msg.from_user.id] = {"service": "–í—ã–≤–æ–¥", "step": "card"}
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã (–ø–æ–ª—É—á–∞—Ç–µ–ª—å):")


@dp.message_handler(lambda m: m.text == "üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_requests(msg: types.Message):
    cursor.execute(
        "SELECT id, service, amount, exact_amount, status FROM requests WHERE user_id=? ORDER BY id DESC LIMIT 10",
        (msg.from_user.id,)
    )
    rows = cursor.fetchall()
    if not rows:
        await msg.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    text = "\n".join(
        f"#{r[0]} {r[1]}: {r[2]}"
        + (f"/{r[3]}" if r[3] else "")
        + f" ‚Äî {r[4]}"
        for r in rows
    )
    await msg.answer("–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n" + text)


@dp.message_handler()
async def process_flow(msg: types.Message):
    uid = msg.from_user.id
    state = user_states.get(uid)
    if not state:
        return  # –Ω–∏—á–µ–≥–æ –Ω–µ –∂–¥—ë–º

    text = msg.text.strip()
    srv = state["service"]
    step = state["step"]

    # 1) –ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
    if step == "card":
        state["card"] = text
        state["step"] = "xbet"
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID 1xBet:")
        return

    # 2) –ü–æ–ª—É—á–∏–ª–∏ ID 1xBet
    if step == "xbet":
        state["xbet_id"] = text
        state["step"] = "amount"
        await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ({MIN_AMOUNT}-{MAX_AMOUNT}):")
        return

    # 3) –ü–æ–ª—É—á–∏–ª–∏ —Å—É–º–º—É
    if step == "amount":
        if not text.isdigit():
            return await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        amount = int(text)
        if amount < MIN_AMOUNT or amount > MAX_AMOUNT:
            return await msg.answer(f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {MIN_AMOUNT} –¥–æ {MAX_AMOUNT}.")
        state["amount"] = amount

        # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
        exact = None
        card_to_pay = None
        if srv == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–Ω—É—é —Å—É–º–º—É
            exact = amount + random.randint(1, 9)
            card_to_pay = get_active_card()
            if not card_to_pay:
                return await msg.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            # –≤—ã–≤–æ–¥: –∫–∞—Ä—Ç–∞ —É–∂–µ –≤ state["card"]
            card_to_pay = state["card"]

        created = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute(
            "INSERT INTO requests (user_id, service, amount, exact_amount, xbet_id, card, status, created_at) VALUES (?, ?, ?, ?, ?, ?, '–æ–∂–∏–¥–∞–µ—Ç', ?)",
            (uid, srv, amount, exact, state["xbet_id"], card_to_pay, created)
        )
        conn.commit()
        req_id = cursor.lastrowid
        user_states.pop(uid)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        if srv == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{req_id}")
            )
            await msg.answer(
                "‚ùóÔ∏è –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É:\n\n"
                f"<b>{exact} UZS</b>\n"
                f"–ö–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: <code>{card_to_pay}</code>\n"
                f"–ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å: {amount} UZS\n\n"
                f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
                f"TG_ID: {uid}   –ó–∞—è–≤–∫–∞: #{req_id}",
                parse_mode="HTML",
                reply_markup=kb
            )
        else:
            await msg.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{req_id} –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return


@dp.callback_query_handler(lambda c: c.data.startswith("paid_"))
async def on_paid(callback: types.CallbackQuery):
    rid = int(callback.data.split("_")[1])
    cursor.execute("UPDATE requests SET status='–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' WHERE id=?", (rid,))
    conn.commit()
    await callback.answer("–°—Ç–∞—Ç—É—Å: –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT])
async def receive_check(msg: types.Message):
    cursor.execute(
        "SELECT id FROM requests WHERE user_id=? AND status='–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' ORDER BY id DESC LIMIT 1",
        (msg.from_user.id,)
    )
    row = cursor.fetchone()
    if not row:
        return
    file_id = msg.photo[-1].file_id if msg.photo else msg.document.file_id
    cursor.execute("UPDATE requests SET file_id=?, status='–æ–∂–∏–¥–∞–µ—Ç' WHERE id=?", (file_id, row[0]))
    conn.commit()
    await msg.answer("–ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


@dp.message_handler(commands=["addcard"])
async def cmd_addcard(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    parts = msg.text.split()
    if len(parts) != 2:
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addcard 9860123412341234")
    num = parts[1]
    cursor.execute("INSERT INTO cards (number) VALUES (?)", (num,))
    conn.commit()
    await msg.answer(f"–ö–∞—Ä—Ç–∞ {num} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")


@dp.message_handler(commands=["cards"])
async def cmd_cards(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    cursor.execute("SELECT id, number, active, usage_count FROM cards")
    rows = cursor.fetchall()
    if not rows:
        return await msg.answer("–ù–µ—Ç –∫–∞—Ä—Ç –≤ –±–∞–∑–µ.")
    text = "\n".join(
        f"{r[0]}: {r[1]}  {'‚úÖ' if r[2] else '‚ùå'}  used {r[3]}"
        for r in rows
    )
    await msg.answer("–ö–∞—Ä—Ç—ã:\n" + text)


@dp.message_handler(commands=["admin"])
async def cmd_admin(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    cursor.execute(
        "SELECT id, service, amount, exact_amount, status FROM requests ORDER BY id DESC LIMIT 10"
    )
    rows = cursor.fetchall()
    if not rows:
        return await msg.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
    for r in rows:
        rid, srv, amt, ex, st = r
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"ok_{rid}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"no_{rid}")
        )
        txt = f"#{rid} {srv} {amt}"
        if ex: txt += f"/{ex}"
        txt += f" ‚Äî {st}"
        await msg.answer(txt, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith("ok_") or c.data.startswith("no_"))
async def on_admin_decide(callback: types.CallbackQuery):
    rid = int(callback.data.split("_")[1])
    decision = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if callback.data.startswith("ok_") else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    cursor.execute("UPDATE requests SET status=? WHERE id=?", (decision, rid))
    conn.commit()
    await callback.answer(f"–ó–∞—è–≤–∫–∞ {rid} {decision}")
    # –æ–±–Ω–æ–≤–∏–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    await callback.message.edit_text(callback.message.text + f" ‚Üí {decision}")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
